name: Application API Build

on:
  push:
    branches: [ "main", "release" ]
  pull_request:
    branches: [ "main", "release" ]

env:
  APP_TAG: app
  APP_QUEUE_TAG: queue
  ECR_APP_TAG: ${{ github.run_id }}_${{ github.sha }}
  ECR_APP_QUEUE_TAG: ${{ github.run_id }}_${{ github.sha }}

jobs:
  initialize-app:
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        node: [ 18 ]
    name: Cache Node dependencies
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          
      - name: Install Packages
        run: |
          cd backend
          npm i
          
      - name: Cache Node Modules
        uses: actions/cache@v3.2.3
        with:
          path: ./backend/node_modules
          key: node-modules-app-cache-key
          
      - name: Cache package-lock.json
        uses: actions/cache@v3.2.3
        with:
          path: ./backend/package-lock.json
          key: package-lock-app-cache-key

  test-and-lint:
    runs-on: ubuntu-latest
    needs: initialize-app
    if: ${{ (github.ref == 'refs/heads/release' || github.ref == 'refs/heads/main') }}
    strategy:
      matrix: 
        node: [ 18 ]
    name: Test And Linting NodeJS v${{ matrix.node }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Use Cached Node Modules
        uses: actions/cache@v3.2.3
        with:
          path: ./backend/node_modules
          key: node-modules-app-cache-key
          
      - name: Use Cached package-lock.json
        uses: actions/cache@v3.2.3
        with:
          path: ./backend/package-lock.json
          key: package-lock-app-cache-key

      - name: Linting
        run: |
          cd backend
          npm run linting

      - name: Testing
        run: |
          cd backend
          npm run test

  validate-terraform:
    runs-on: ubuntu-latest
    needs: initialize-app
    if: ${{ (github.ref == 'refs/heads/release' || github.ref == 'refs/heads/main') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7
    
      - name: Validate Terraform
        run: |
          cd backend/deploy
          terraform init -backend=false
          terraform validate

  build-and-push-app-api-qa:
    runs-on: ubuntu-latest
    environment: qa
    needs: [ test-and-lint, validate-terraform ]
    if: ${{ github.ref == 'refs/heads/release' }}
    strategy:
      matrix: 
        node: [ 18 ]
    steps:
      - name: Add Python 3
        run: |
          sudo apt-get update
          sudo apt-get install python3
     
      - name: Install AWS CLI
        run: pip3 install awscli==1.18.8

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          cd backend
          touch .env
          echo PORT=${{ secrets.APP_PORT }} >> .env
          echo ORIGIN=${{ secrets.APP_ORIGIN }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo JWT_EXPIRATION_TIME=${{ secrets.JWT_EXPIRATION_TIME }} >> .env

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Use Cached Node Modules
        uses: actions/cache@v3.2.3
        with:
          path: ./backend/node_modules
          key: node-modules-app-cache-key
          
      - name: Use Cached package-lock.json
        uses: actions/cache@v3.2.3
        with:
          path: ./backend/package-lock.json
          key: package-lock-app-cache-key

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEVOPS_APP_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEVOPS_APP_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_APP_REGION }}

      - name: AWS Login Docker
        run: $(aws ecr get-login --no-include-email --region ${{ secrets.AWS_APP_REGION }})

      - name: Build And Push the APP Docker image
        run: |
          mkdir -p images/app
          docker build --file ./backend/docker/prod/images/app/Dockerfile --compress -t ${{ env.APP_TAG }} .
          docker tag ${{ env.APP_TAG }}:latest ${{ secrets.AWS_ECR_REPOSITORY_APP }}:${{ env.ECR_APP_TAG }}
          docker push ${{ secrets.AWS_ECR_REPOSITORY_APP }}:${{ env.ECR_APP_TAG }}

  build-and-push-app-queue-qa:
    runs-on: ubuntu-latest
    environment: qa
    needs: [ test-and-lint, validate-terraform ]
    if: ${{ github.ref == 'refs/heads/release' }}
    strategy:
      matrix: 
        node: [ 18 ]
    steps:
      - name: Add Python 3
        run: |
          sudo apt-get update
          sudo apt-get install python3
     
      - name: Install AWS CLI
        run: pip3 install awscli==1.18.8

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          cd backend
          touch .env
          echo PORT=${{ secrets.APP_PORT }} >> .env
          echo ORIGIN=${{ secrets.APP_ORIGIN }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo JWT_EXPIRATION_TIME=${{ secrets.JWT_EXPIRATION_TIME }} >> .env

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Use Cached Node Modules
        uses: actions/cache@v3.2.3
        with:
          path: ./backend/node_modules
          key: node-modules-app-cache-key
          
      - name: Use Cached package-lock.json
        uses: actions/cache@v3.2.3
        with:
          path: ./backend/package-lock.json
          key: package-lock-app-cache-key

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEVOPS_APP_QUEUE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEVOPS_APP_QUEUE_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_APP_QUEUE_REGION }}

      - name: AWS Login Docker
        run: $(aws ecr get-login --no-include-email --region ${{ secrets.AWS_APP_QUEUE_REGION }})

      - name: Build And Push the APP Queue Docker image
        run: |
          mkdir -p images/app-queue
          docker build --file ./backend/docker/prod/images/app-queue/Dockerfile --compress -t ${{ env.APP_QUEUE_TAG }} .
          docker tag ${{ env.APP_QUEUE_TAG }}:latest ${{ secrets.AWS_ECR_REPOSITORY_APP_QUEUE }}:${{ env.ECR_APP_QUEUE_TAG }}
          docker push ${{ secrets.AWS_ECR_REPOSITORY_APP_QUEUE }}:${{ env.ECR_APP_QUEUE_TAG }}

  build-and-push-app-api-prod:
    runs-on: ubuntu-latest
    environment: prod
    needs: [ test-and-lint, validate-terraform ]
    if: ${{ github.ref == 'refs/heads/main' }}
    strategy:
      matrix: 
        node: [ 18 ]
    steps:
      - name: Add Python 3
        run: |
          sudo apt-get update
          sudo apt-get install python3
     
      - name: Install AWS CLI
        run: pip3 install awscli==1.18.8

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          cd backend
          touch .env
          echo PORT=${{ secrets.APP_PORT }} >> .env
          echo ORIGIN=${{ secrets.APP_ORIGIN }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo JWT_EXPIRATION_TIME=${{ secrets.JWT_EXPIRATION_TIME }} >> .env

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Use Cached Node Modules
        uses: actions/cache@v3.2.3
        with:
          path: ./backend/node_modules
          key: node-modules-app-cache-key
          
      - name: Use Cached package-lock.json
        uses: actions/cache@v3.2.3
        with:
          path: ./backend/package-lock.json
          key: package-lock-app-cache-key

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEVOPS_APP_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEVOPS_APP_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_APP_REGION }}

      - name: AWS Login Docker
        run: $(aws ecr get-login --no-include-email --region ${{ secrets.AWS_APP_REGION }})

      - name: Build And Push the APP Docker image
        run: |
          mkdir -p images/app
          docker build --file ./backend/docker/prod/images/app/Dockerfile --compress -t ${{ env.APP_TAG }} .
          docker tag ${{ env.APP_TAG }}:latest ${{ secrets.AWS_ECR_REPOSITORY_APP }}:${{ env.ECR_APP_TAG }}
          docker push ${{ secrets.AWS_ECR_REPOSITORY_APP }}:${{ env.ECR_APP_TAG }}

  build-and-push-app-queue-prod:
    runs-on: ubuntu-latest
    environment: prod
    needs: [ test-and-lint, validate-terraform ]
    if: ${{ github.ref == 'refs/heads/main' }}
    strategy:
      matrix: 
        node: [ 18 ]
    steps:
      - name: Add Python 3
        run: |
          sudo apt-get update
          sudo apt-get install python3
     
      - name: Install AWS CLI
        run: pip3 install awscli==1.18.8

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          cd backend
          touch .env
          echo PORT=${{ secrets.APP_PORT }} >> .env
          echo ORIGIN=${{ secrets.APP_ORIGIN }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo JWT_EXPIRATION_TIME=${{ secrets.JWT_EXPIRATION_TIME }} >> .env

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Use Cached Node Modules
        uses: actions/cache@v3.2.3
        with:
          path: ./backend/node_modules
          key: node-modules-app-cache-key
          
      - name: Use Cached package-lock.json
        uses: actions/cache@v3.2.3
        with:
          path: ./backend/package-lock.json
          key: package-lock-app-cache-key

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEVOPS_APP_QUEUE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEVOPS_APP_QUEUE_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_APP_QUEUE_REGION }}

      - name: AWS Login Docker
        run: $(aws ecr get-login --no-include-email --region ${{ secrets.AWS_APP_QUEUE_REGION }})

      - name: Build And Push the APP Queue Docker image
        run: |
          mkdir -p images/app-queue
          docker build --file ./backend/docker/prod/images/app-queue/Dockerfile --compress -t ${{ env.APP_QUEUE_TAG }} .
          docker tag ${{ env.APP_QUEUE_TAG }}:latest ${{ secrets.AWS_ECR_REPOSITORY_APP_QUEUE }}:${{ env.ECR_APP_QUEUE_TAG }}
          docker push ${{ secrets.AWS_ECR_REPOSITORY_APP_QUEUE }}:${{ env.ECR_APP_QUEUE_TAG }}

  staging-plan:
    runs-on: ubuntu-latest
    needs: [ build-and-push-app-api-qa, build-and-push-app-queue-qa ]
    if: ${{ github.ref == 'refs/heads/release' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEVOPS_APP_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEVOPS_APP_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_APP_REGION }}

      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Staging Plan
        run: |
          cd backend/deploy
          export TF_VAR_ecr_app_image=${{ secrets.AWS_ECR_REPOSITORY_APP }}:${{ env.ECR_APP_TAG }}
          terraform init
          terraform workspace select staging || terraform workspace new staging
          terraform plan

  staging-apply:
    runs-on: ubuntu-latest
    needs: staging-plan
    if: ${{ github.ref == 'refs/heads/release' }}
    steps:
      - name: Staging Apply
        run: |
          echo "Staging Apply"

  production-plan:
    runs-on: ubuntu-latest
    needs: [ build-and-push-app-api-prod, build-and-push-app-queue-prod ]
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Production Plan
        run: |
          cd backend/deploy
          export TF_VAR_ecr_app_image=${{ secrets.AWS_ECR_REPOSITORY_APP }}:${{ env.ECR_APP_TAG }}
          export TF_VAR_ecr_app_queue_image=${{ secrets.AWS_ECR_REPOSITORY_APP_QUEUE }}:${{ env.ECR_APP_QUEUE_TAG }}
          terraform init
          terraform workspace select production || terraform workspace new production
          terraform plan

  production-apply:
    runs-on: ubuntu-latest
    needs: production-plan
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Production Apply
        run: |
          echo "Production Apply"

  staging-destroy:
    runs-on: ubuntu-latest
    needs: staging-apply
    if: ${{ github.ref == 'refs/heads/release' }}
    steps:
      - name: Destroy Staging
        run: |
          echo "Run Terraform to destroy staging"

  production-destroy:
    runs-on: ubuntu-latest
    needs: production-apply
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Destroy Production
        run: |
          echo "Run Terraform to destroy production"
