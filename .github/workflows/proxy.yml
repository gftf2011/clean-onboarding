name: Proxy Docker Image CI

on:
  push:
    branches: [ "main" ]
    tags: [ "*-release" ]
  pull_request:
    branches: [ "main" ]
    
env:
  PROXY_TAG: proxy
  ECR_PROD_TAG: prod_${{ github.run_number }}_${{ github.run_id }}

jobs:
  build-proxy-prod:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Build the Proxy Docker image
      run: |
        mkdir -p images/nginx
        docker build --file ./backend/docker/prod/images/nginx/Dockerfile --compress -t ${{ env.PROXY_TAG }} --build-arg listen_port=${{ secrets.PROXY_LISTEN_PORT }} --build-arg server_app=${{ secrets.SERVER_APP }} --build-arg server_port=${{ secrets.SERVER_PORT }} .
        docker save --output ./images/nginx/proxy-image.tar ${{ env.PROXY_TAG }}
    - name: Upload Proxy Docker image Artifact
      uses: actions/upload-artifact@v3
      with:
        name: proxy-image-artifact
        path: ./images/nginx/proxy-image.tar

  publish-proxy-prod:
    needs: [ build-proxy-prod ]
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push' || github.event_name == 'pull_request') && github.ref == 'refs/heads/main' }}
    steps:
      - name: Add Python 3
        run: |
          sudo apt-get update
          sudo apt-get install python3
     
      - name: Install AWS CLI
        run: pip3 install awscli==1.18.8
       
      - name: Donwload artifact
        uses: actions/download-artifact@v3
        with:
          name: proxy-image-artifact
        
      - name: Move artifact to images folder
        run: |
          mkdir -p images/nginx
          mv proxy-image.tar images/nginx
          
      - name: Load artifact to Docker image
        run: docker load --input images/nginx/proxy-image.tar
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_PROXY_REGION }}
          
      - name: AWS Login Docker
        run: $(aws ecr get-login --no-include-email --region ${{ secrets.AWS_PROXY_REGION }})
        
      - name: Push Docker image to ECR
        run: |
          docker tag ${{ env.PROXY_TAG }}:latest ${{ secrets.AWS_ECR_REPOSITORY_PROXY }}:${{ env.ECR_PROD_TAG }}
          docker push ${{ secrets.AWS_ECR_REPOSITORY_PROXY }}:${{ env.ECR_PROD_TAG }}
